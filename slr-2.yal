(* Lexer para Gramática No. 2 - Expresiones aritméticas extendidas *)

(* Introducir cualquier header aqui *)

let delim = ["\s\t\n"]
let ws = delim+
let letter = ['A'-'F''a'-'f']
let digit = ['0'-'9']
let digits = digit+
let id = letter(letter|digit)*
let number = digits(.digits)?('E'['+''-']?digits)?

rule tokens = 
    ws        { print("Hola, mundo!") }               (* Cambie por una acción válida, que devuelva el token *)
  | id        { print("Hola, mundo!") }
  | number    { return "NUMBER" }
  | '+'       { return "PLUS" }
  | '-'       { return MINUS }
  | '*'       { return TIMES }
  | '/'       { x = "text in string"
print(x) }
  | '('       { return LPAREN }
  | ')'       { return RPAREN }

(* Introducir cualquier trailer aqui *)